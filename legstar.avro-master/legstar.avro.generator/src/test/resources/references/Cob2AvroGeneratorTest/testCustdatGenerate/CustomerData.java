/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package test.example;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CustomerData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CustomerData\",\"namespace\":\"test.example\",\"fields\":[{\"name\":\"customerId\",\"type\":\"long\"},{\"name\":\"personalData\",\"type\":{\"type\":\"record\",\"name\":\"PersonalData\",\"fields\":[{\"name\":\"customerName\",\"type\":\"string\"},{\"name\":\"customerAddress\",\"type\":\"string\"},{\"name\":\"customerPhone\",\"type\":\"string\"}]}},{\"name\":\"transactions\",\"type\":{\"type\":\"record\",\"name\":\"Transactions\",\"fields\":[{\"name\":\"transactionNbr\",\"type\":\"long\"},{\"name\":\"transaction\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Transaction\",\"fields\":[{\"name\":\"transactionDateChoice\",\"type\":[\"string\",{\"type\":\"record\",\"name\":\"Filler12\",\"fields\":[{\"name\":\"transactionDay\",\"type\":\"string\"},{\"name\":\"filler14\",\"type\":\"string\"},{\"name\":\"transactionMonth\",\"type\":\"string\"},{\"name\":\"filler16\",\"type\":\"string\"},{\"name\":\"transactionYear\",\"type\":\"string\"}]}]},{\"name\":\"transactionAmount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":15,\"scale\":2}},{\"name\":\"transactionComment\",\"type\":\"string\"}]}}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long customerId;
  @Deprecated public test.example.PersonalData personalData;
  @Deprecated public test.example.Transactions transactions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public CustomerData() {}

  /**
   * All-args constructor.
   */
  public CustomerData(java.lang.Long customerId, test.example.PersonalData personalData, test.example.Transactions transactions) {
    setCustomerId(customerId);
    setPersonalData(personalData);
    setTransactions(transactions);
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customerId;
    case 1: return personalData;
    case 2: return transactions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customerId = (java.lang.Long)value$; break;
    case 1: personalData = (test.example.PersonalData)value$; break;
    case 2: transactions = (test.example.Transactions)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'customerId' field.
   */
  public java.lang.Long getCustomerId() {
    return customerId;
  }

  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.Long value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'personalData' field.
   */
  public test.example.PersonalData getPersonalData() {
    return personalData;
  }

  /**
   * Sets the value of the 'personalData' field.
   * @param value the value to set.
   */
  public void setPersonalData(test.example.PersonalData value) {
    this.personalData = value;
  }

  /**
   * Gets the value of the 'transactions' field.
   */
  public test.example.Transactions getTransactions() {
    return transactions;
  }

  /**
   * Sets the value of the 'transactions' field.
   * @param value the value to set.
   */
  public void setTransactions(test.example.Transactions value) {
    this.transactions = value;
  }

  /** Creates a new CustomerData RecordBuilder */
  public static test.example.CustomerData.Builder newBuilder() {
    return new test.example.CustomerData.Builder();
  }
  
  /** Creates a new CustomerData RecordBuilder by copying an existing Builder */
  public static test.example.CustomerData.Builder newBuilder(test.example.CustomerData.Builder other) {
    return new test.example.CustomerData.Builder(other);
  }
  
  /** Creates a new CustomerData RecordBuilder by copying an existing CustomerData instance */
  public static test.example.CustomerData.Builder newBuilder(test.example.CustomerData other) {
    return new test.example.CustomerData.Builder(other);
  }
  
  /**
   * RecordBuilder for CustomerData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CustomerData>
    implements org.apache.avro.data.RecordBuilder<CustomerData> {

    private long customerId;
    private test.example.PersonalData personalData;
    private test.example.Transactions transactions;

    /** Creates a new Builder */
    private Builder() {
      super(test.example.CustomerData.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(test.example.CustomerData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.personalData)) {
        this.personalData = data().deepCopy(fields()[1].schema(), other.personalData);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transactions)) {
        this.transactions = data().deepCopy(fields()[2].schema(), other.transactions);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing CustomerData instance */
    private Builder(test.example.CustomerData other) {
            super(test.example.CustomerData.SCHEMA$);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.personalData)) {
        this.personalData = data().deepCopy(fields()[1].schema(), other.personalData);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transactions)) {
        this.transactions = data().deepCopy(fields()[2].schema(), other.transactions);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'customerId' field */
    public java.lang.Long getCustomerId() {
      return customerId;
    }
    
    /** Sets the value of the 'customerId' field */
    public test.example.CustomerData.Builder setCustomerId(long value) {
      validate(fields()[0], value);
      this.customerId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'customerId' field has been set */
    public boolean hasCustomerId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'customerId' field */
    public test.example.CustomerData.Builder clearCustomerId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'personalData' field */
    public test.example.PersonalData getPersonalData() {
      return personalData;
    }
    
    /** Sets the value of the 'personalData' field */
    public test.example.CustomerData.Builder setPersonalData(test.example.PersonalData value) {
      validate(fields()[1], value);
      this.personalData = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'personalData' field has been set */
    public boolean hasPersonalData() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'personalData' field */
    public test.example.CustomerData.Builder clearPersonalData() {
      personalData = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'transactions' field */
    public test.example.Transactions getTransactions() {
      return transactions;
    }
    
    /** Sets the value of the 'transactions' field */
    public test.example.CustomerData.Builder setTransactions(test.example.Transactions value) {
      validate(fields()[2], value);
      this.transactions = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'transactions' field has been set */
    public boolean hasTransactions() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'transactions' field */
    public test.example.CustomerData.Builder clearTransactions() {
      transactions = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public CustomerData build() {
      try {
        CustomerData record = new CustomerData();
        record.customerId = fieldSetFlags()[0] ? this.customerId : (java.lang.Long) defaultValue(fields()[0]);
        record.personalData = fieldSetFlags()[1] ? this.personalData : (test.example.PersonalData) defaultValue(fields()[1]);
        record.transactions = fieldSetFlags()[2] ? this.transactions : (test.example.Transactions) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
