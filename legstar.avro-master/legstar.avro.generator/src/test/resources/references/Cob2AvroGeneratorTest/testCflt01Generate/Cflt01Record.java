/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package test.example;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Cflt01Record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Cflt01Record\",\"namespace\":\"test.example\",\"fields\":[{\"name\":\"cfltParent1\",\"type\":{\"type\":\"record\",\"name\":\"CfltParent1\",\"fields\":[{\"name\":\"cfltInfo\",\"type\":{\"type\":\"record\",\"name\":\"CfltInfo9\",\"fields\":[{\"name\":\"cfltId\",\"type\":\"string\"},{\"name\":\"cfltTypCd\",\"type\":\"string\"}]}}]}},{\"name\":\"cfltParent2\",\"type\":{\"type\":\"record\",\"name\":\"CfltParent2\",\"fields\":[{\"name\":\"cfltInfo\",\"type\":{\"type\":\"record\",\"name\":\"CfltInfo13\",\"fields\":[{\"name\":\"cfltIdCt\",\"type\":\"string\"},{\"name\":\"cfltTypCdCt\",\"type\":\"string\"}]}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public test.example.CfltParent1 cfltParent1;
  @Deprecated public test.example.CfltParent2 cfltParent2;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Cflt01Record() {}

  /**
   * All-args constructor.
   */
  public Cflt01Record(test.example.CfltParent1 cfltParent1, test.example.CfltParent2 cfltParent2) {
    setCfltParent1(cfltParent1);
    setCfltParent2(cfltParent2);
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cfltParent1;
    case 1: return cfltParent2;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cfltParent1 = (test.example.CfltParent1)value$; break;
    case 1: cfltParent2 = (test.example.CfltParent2)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cfltParent1' field.
   */
  public test.example.CfltParent1 getCfltParent1() {
    return cfltParent1;
  }

  /**
   * Sets the value of the 'cfltParent1' field.
   * @param value the value to set.
   */
  public void setCfltParent1(test.example.CfltParent1 value) {
    this.cfltParent1 = value;
  }

  /**
   * Gets the value of the 'cfltParent2' field.
   */
  public test.example.CfltParent2 getCfltParent2() {
    return cfltParent2;
  }

  /**
   * Sets the value of the 'cfltParent2' field.
   * @param value the value to set.
   */
  public void setCfltParent2(test.example.CfltParent2 value) {
    this.cfltParent2 = value;
  }

  /** Creates a new Cflt01Record RecordBuilder */
  public static test.example.Cflt01Record.Builder newBuilder() {
    return new test.example.Cflt01Record.Builder();
  }
  
  /** Creates a new Cflt01Record RecordBuilder by copying an existing Builder */
  public static test.example.Cflt01Record.Builder newBuilder(test.example.Cflt01Record.Builder other) {
    return new test.example.Cflt01Record.Builder(other);
  }
  
  /** Creates a new Cflt01Record RecordBuilder by copying an existing Cflt01Record instance */
  public static test.example.Cflt01Record.Builder newBuilder(test.example.Cflt01Record other) {
    return new test.example.Cflt01Record.Builder(other);
  }
  
  /**
   * RecordBuilder for Cflt01Record instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Cflt01Record>
    implements org.apache.avro.data.RecordBuilder<Cflt01Record> {

    private test.example.CfltParent1 cfltParent1;
    private test.example.CfltParent2 cfltParent2;

    /** Creates a new Builder */
    private Builder() {
      super(test.example.Cflt01Record.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(test.example.Cflt01Record.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cfltParent1)) {
        this.cfltParent1 = data().deepCopy(fields()[0].schema(), other.cfltParent1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cfltParent2)) {
        this.cfltParent2 = data().deepCopy(fields()[1].schema(), other.cfltParent2);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Cflt01Record instance */
    private Builder(test.example.Cflt01Record other) {
            super(test.example.Cflt01Record.SCHEMA$);
      if (isValidValue(fields()[0], other.cfltParent1)) {
        this.cfltParent1 = data().deepCopy(fields()[0].schema(), other.cfltParent1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cfltParent2)) {
        this.cfltParent2 = data().deepCopy(fields()[1].schema(), other.cfltParent2);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'cfltParent1' field */
    public test.example.CfltParent1 getCfltParent1() {
      return cfltParent1;
    }
    
    /** Sets the value of the 'cfltParent1' field */
    public test.example.Cflt01Record.Builder setCfltParent1(test.example.CfltParent1 value) {
      validate(fields()[0], value);
      this.cfltParent1 = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'cfltParent1' field has been set */
    public boolean hasCfltParent1() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'cfltParent1' field */
    public test.example.Cflt01Record.Builder clearCfltParent1() {
      cfltParent1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'cfltParent2' field */
    public test.example.CfltParent2 getCfltParent2() {
      return cfltParent2;
    }
    
    /** Sets the value of the 'cfltParent2' field */
    public test.example.Cflt01Record.Builder setCfltParent2(test.example.CfltParent2 value) {
      validate(fields()[1], value);
      this.cfltParent2 = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'cfltParent2' field has been set */
    public boolean hasCfltParent2() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'cfltParent2' field */
    public test.example.Cflt01Record.Builder clearCfltParent2() {
      cfltParent2 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Cflt01Record build() {
      try {
        Cflt01Record record = new Cflt01Record();
        record.cfltParent1 = fieldSetFlags()[0] ? this.cfltParent1 : (test.example.CfltParent1) defaultValue(fields()[0]);
        record.cfltParent2 = fieldSetFlags()[1] ? this.cfltParent2 : (test.example.CfltParent2) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
