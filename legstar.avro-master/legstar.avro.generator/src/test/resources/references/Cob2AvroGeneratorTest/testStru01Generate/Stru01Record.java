/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package test.example;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Stru01Record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Stru01Record\",\"namespace\":\"test.example\",\"fields\":[{\"name\":\"comNumber\",\"type\":\"long\"},{\"name\":\"comName\",\"type\":\"string\"},{\"name\":\"comAmount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":7,\"scale\":2}},{\"name\":\"comSubRecord\",\"type\":{\"type\":\"record\",\"name\":\"ComSubRecord\",\"fields\":[{\"name\":\"comItem1\",\"type\":\"int\"},{\"name\":\"comItem2\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long comNumber;
  @Deprecated public java.lang.CharSequence comName;
  @Deprecated public java.nio.ByteBuffer comAmount;
  @Deprecated public test.example.ComSubRecord comSubRecord;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Stru01Record() {}

  /**
   * All-args constructor.
   */
  public Stru01Record(java.lang.Long comNumber, java.lang.CharSequence comName, java.math.BigDecimal comAmount, test.example.ComSubRecord comSubRecord) {
    setComNumber(comNumber);
    setComName(comName);
    setComAmount(comAmount);
    setComSubRecord(comSubRecord);
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return comNumber;
    case 1: return comName;
    case 2: return comAmount;
    case 3: return comSubRecord;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: comNumber = (java.lang.Long)value$; break;
    case 1: comName = (java.lang.CharSequence)value$; break;
    case 2: comAmount = (java.nio.ByteBuffer)value$; break;
    case 3: comSubRecord = (test.example.ComSubRecord)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'comNumber' field.
   */
  public java.lang.Long getComNumber() {
    return comNumber;
  }

  /**
   * Sets the value of the 'comNumber' field.
   * @param value the value to set.
   */
  public void setComNumber(java.lang.Long value) {
    this.comNumber = value;
  }

  /**
   * Gets the value of the 'comName' field.
   */
  public java.lang.CharSequence getComName() {
    return comName;
  }

  /**
   * Sets the value of the 'comName' field.
   * @param value the value to set.
   */
  public void setComName(java.lang.CharSequence value) {
    this.comName = value;
  }

  /**
   * Gets the value of the 'comAmount' field.
   */
  public java.math.BigDecimal getComAmount() {
    return new java.math.BigDecimal(new java.math.BigInteger(comAmount.array()), 2);
  }

  /**
   * Sets the value of the 'comAmount' field.
   * @param value the value to set.
   */
  public void setComAmount(java.math.BigDecimal value) {
    this.comAmount = java.nio.ByteBuffer.wrap(value.unscaledValue().toByteArray());
  }

  /**
   * Gets the value of the 'comSubRecord' field.
   */
  public test.example.ComSubRecord getComSubRecord() {
    return comSubRecord;
  }

  /**
   * Sets the value of the 'comSubRecord' field.
   * @param value the value to set.
   */
  public void setComSubRecord(test.example.ComSubRecord value) {
    this.comSubRecord = value;
  }

  /** Creates a new Stru01Record RecordBuilder */
  public static test.example.Stru01Record.Builder newBuilder() {
    return new test.example.Stru01Record.Builder();
  }
  
  /** Creates a new Stru01Record RecordBuilder by copying an existing Builder */
  public static test.example.Stru01Record.Builder newBuilder(test.example.Stru01Record.Builder other) {
    return new test.example.Stru01Record.Builder(other);
  }
  
  /** Creates a new Stru01Record RecordBuilder by copying an existing Stru01Record instance */
  public static test.example.Stru01Record.Builder newBuilder(test.example.Stru01Record other) {
    return new test.example.Stru01Record.Builder(other);
  }
  
  /**
   * RecordBuilder for Stru01Record instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Stru01Record>
    implements org.apache.avro.data.RecordBuilder<Stru01Record> {

    private long comNumber;
    private java.lang.CharSequence comName;
    private java.nio.ByteBuffer comAmount;
    private test.example.ComSubRecord comSubRecord;

    /** Creates a new Builder */
    private Builder() {
      super(test.example.Stru01Record.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(test.example.Stru01Record.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.comNumber)) {
        this.comNumber = data().deepCopy(fields()[0].schema(), other.comNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.comName)) {
        this.comName = data().deepCopy(fields()[1].schema(), other.comName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.comAmount)) {
        this.comAmount = data().deepCopy(fields()[2].schema(), other.comAmount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.comSubRecord)) {
        this.comSubRecord = data().deepCopy(fields()[3].schema(), other.comSubRecord);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Stru01Record instance */
    private Builder(test.example.Stru01Record other) {
            super(test.example.Stru01Record.SCHEMA$);
      if (isValidValue(fields()[0], other.comNumber)) {
        this.comNumber = data().deepCopy(fields()[0].schema(), other.comNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.comName)) {
        this.comName = data().deepCopy(fields()[1].schema(), other.comName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.comAmount)) {
        this.comAmount = data().deepCopy(fields()[2].schema(), other.comAmount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.comSubRecord)) {
        this.comSubRecord = data().deepCopy(fields()[3].schema(), other.comSubRecord);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'comNumber' field */
    public java.lang.Long getComNumber() {
      return comNumber;
    }
    
    /** Sets the value of the 'comNumber' field */
    public test.example.Stru01Record.Builder setComNumber(long value) {
      validate(fields()[0], value);
      this.comNumber = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'comNumber' field has been set */
    public boolean hasComNumber() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'comNumber' field */
    public test.example.Stru01Record.Builder clearComNumber() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'comName' field */
    public java.lang.CharSequence getComName() {
      return comName;
    }
    
    /** Sets the value of the 'comName' field */
    public test.example.Stru01Record.Builder setComName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.comName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'comName' field has been set */
    public boolean hasComName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'comName' field */
    public test.example.Stru01Record.Builder clearComName() {
      comName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'comAmount' field */
    public java.nio.ByteBuffer getComAmount() {
      return comAmount;
    }
    
    /** Sets the value of the 'comAmount' field */
    public test.example.Stru01Record.Builder setComAmount(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.comAmount = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'comAmount' field has been set */
    public boolean hasComAmount() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'comAmount' field */
    public test.example.Stru01Record.Builder clearComAmount() {
      comAmount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'comSubRecord' field */
    public test.example.ComSubRecord getComSubRecord() {
      return comSubRecord;
    }
    
    /** Sets the value of the 'comSubRecord' field */
    public test.example.Stru01Record.Builder setComSubRecord(test.example.ComSubRecord value) {
      validate(fields()[3], value);
      this.comSubRecord = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'comSubRecord' field has been set */
    public boolean hasComSubRecord() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'comSubRecord' field */
    public test.example.Stru01Record.Builder clearComSubRecord() {
      comSubRecord = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Stru01Record build() {
      try {
        Stru01Record record = new Stru01Record();
        record.comNumber = fieldSetFlags()[0] ? this.comNumber : (java.lang.Long) defaultValue(fields()[0]);
        record.comName = fieldSetFlags()[1] ? this.comName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.comAmount = fieldSetFlags()[2] ? this.comAmount : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        record.comSubRecord = fieldSetFlags()[3] ? this.comSubRecord : (test.example.ComSubRecord) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
