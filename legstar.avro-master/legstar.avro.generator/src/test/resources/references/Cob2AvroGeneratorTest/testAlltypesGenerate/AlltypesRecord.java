/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package test.example;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AlltypesRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AlltypesRecord\",\"namespace\":\"test.example\",\"fields\":[{\"name\":\"sString\",\"type\":\"string\"},{\"name\":\"sBinary\",\"type\":\"string\"},{\"name\":\"sShort\",\"type\":\"int\"},{\"name\":\"sUshort\",\"type\":\"int\"},{\"name\":\"sInt\",\"type\":\"int\"},{\"name\":\"sUint\",\"type\":\"long\"},{\"name\":\"sLong\",\"type\":\"long\"},{\"name\":\"sUlong\",\"type\":\"long\"},{\"name\":\"sXlong\",\"type\":\"long\"},{\"name\":\"sUxlong\",\"type\":\"long\"},{\"name\":\"sDec\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":9,\"scale\":2}},{\"name\":\"sFloat\",\"type\":\"float\"},{\"name\":\"sDouble\",\"type\":\"double\"},{\"name\":\"aString\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"aBinary\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"aShort\",\"type\":{\"type\":\"array\",\"items\":\"int\"}},{\"name\":\"aUshort\",\"type\":{\"type\":\"array\",\"items\":\"int\"}},{\"name\":\"aInt\",\"type\":{\"type\":\"array\",\"items\":\"int\"}},{\"name\":\"aUint\",\"type\":{\"type\":\"array\",\"items\":\"long\"}},{\"name\":\"aLong\",\"type\":{\"type\":\"array\",\"items\":\"long\"}},{\"name\":\"aUlong\",\"type\":{\"type\":\"array\",\"items\":\"long\"}},{\"name\":\"aXlong\",\"type\":{\"type\":\"array\",\"items\":\"long\"}},{\"name\":\"aUxlong\",\"type\":{\"type\":\"array\",\"items\":\"long\"}},{\"name\":\"aDec\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":9,\"scale\":2}}},{\"name\":\"aFloat\",\"type\":{\"type\":\"array\",\"items\":\"float\"}},{\"name\":\"aDouble\",\"type\":{\"type\":\"array\",\"items\":\"double\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence sString;
  @Deprecated public java.lang.CharSequence sBinary;
  @Deprecated public int sShort;
  @Deprecated public int sUshort;
  @Deprecated public int sInt;
  @Deprecated public long sUint;
  @Deprecated public long sLong;
  @Deprecated public long sUlong;
  @Deprecated public long sXlong;
  @Deprecated public long sUxlong;
  @Deprecated public java.nio.ByteBuffer sDec;
  @Deprecated public float sFloat;
  @Deprecated public double sDouble;
  @Deprecated public java.util.List<java.lang.CharSequence> aString;
  @Deprecated public java.util.List<java.lang.CharSequence> aBinary;
  @Deprecated public java.util.List<java.lang.Integer> aShort;
  @Deprecated public java.util.List<java.lang.Integer> aUshort;
  @Deprecated public java.util.List<java.lang.Integer> aInt;
  @Deprecated public java.util.List<java.lang.Long> aUint;
  @Deprecated public java.util.List<java.lang.Long> aLong;
  @Deprecated public java.util.List<java.lang.Long> aUlong;
  @Deprecated public java.util.List<java.lang.Long> aXlong;
  @Deprecated public java.util.List<java.lang.Long> aUxlong;
  @Deprecated public java.util.List<java.nio.ByteBuffer> aDec;
  @Deprecated public java.util.List<java.lang.Float> aFloat;
  @Deprecated public java.util.List<java.lang.Double> aDouble;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AlltypesRecord() {}

  /**
   * All-args constructor.
   */
  public AlltypesRecord(java.lang.CharSequence sString, java.lang.CharSequence sBinary, java.lang.Integer sShort, java.lang.Integer sUshort, java.lang.Integer sInt, java.lang.Long sUint, java.lang.Long sLong, java.lang.Long sUlong, java.lang.Long sXlong, java.lang.Long sUxlong, java.math.BigDecimal sDec, java.lang.Float sFloat, java.lang.Double sDouble, java.util.List<java.lang.CharSequence> aString, java.util.List<java.lang.CharSequence> aBinary, java.util.List<java.lang.Integer> aShort, java.util.List<java.lang.Integer> aUshort, java.util.List<java.lang.Integer> aInt, java.util.List<java.lang.Long> aUint, java.util.List<java.lang.Long> aLong, java.util.List<java.lang.Long> aUlong, java.util.List<java.lang.Long> aXlong, java.util.List<java.lang.Long> aUxlong, java.util.List<java.nio.ByteBuffer> aDec, java.util.List<java.lang.Float> aFloat, java.util.List<java.lang.Double> aDouble) {
    setSString(sString);
    setSBinary(sBinary);
    setSShort(sShort);
    setSUshort(sUshort);
    setSInt(sInt);
    setSUint(sUint);
    setSLong(sLong);
    setSUlong(sUlong);
    setSXlong(sXlong);
    setSUxlong(sUxlong);
    setSDec(sDec);
    setSFloat(sFloat);
    setSDouble(sDouble);
    setAString(aString);
    setABinary(aBinary);
    setAShort(aShort);
    setAUshort(aUshort);
    setAInt(aInt);
    setAUint(aUint);
    setALong(aLong);
    setAUlong(aUlong);
    setAXlong(aXlong);
    setAUxlong(aUxlong);
    setADec(aDec);
    setAFloat(aFloat);
    setADouble(aDouble);
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sString;
    case 1: return sBinary;
    case 2: return sShort;
    case 3: return sUshort;
    case 4: return sInt;
    case 5: return sUint;
    case 6: return sLong;
    case 7: return sUlong;
    case 8: return sXlong;
    case 9: return sUxlong;
    case 10: return sDec;
    case 11: return sFloat;
    case 12: return sDouble;
    case 13: return aString;
    case 14: return aBinary;
    case 15: return aShort;
    case 16: return aUshort;
    case 17: return aInt;
    case 18: return aUint;
    case 19: return aLong;
    case 20: return aUlong;
    case 21: return aXlong;
    case 22: return aUxlong;
    case 23: return aDec;
    case 24: return aFloat;
    case 25: return aDouble;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sString = (java.lang.CharSequence)value$; break;
    case 1: sBinary = (java.lang.CharSequence)value$; break;
    case 2: sShort = (java.lang.Integer)value$; break;
    case 3: sUshort = (java.lang.Integer)value$; break;
    case 4: sInt = (java.lang.Integer)value$; break;
    case 5: sUint = (java.lang.Long)value$; break;
    case 6: sLong = (java.lang.Long)value$; break;
    case 7: sUlong = (java.lang.Long)value$; break;
    case 8: sXlong = (java.lang.Long)value$; break;
    case 9: sUxlong = (java.lang.Long)value$; break;
    case 10: sDec = (java.nio.ByteBuffer)value$; break;
    case 11: sFloat = (java.lang.Float)value$; break;
    case 12: sDouble = (java.lang.Double)value$; break;
    case 13: aString = (java.util.List<java.lang.CharSequence>)value$; break;
    case 14: aBinary = (java.util.List<java.lang.CharSequence>)value$; break;
    case 15: aShort = (java.util.List<java.lang.Integer>)value$; break;
    case 16: aUshort = (java.util.List<java.lang.Integer>)value$; break;
    case 17: aInt = (java.util.List<java.lang.Integer>)value$; break;
    case 18: aUint = (java.util.List<java.lang.Long>)value$; break;
    case 19: aLong = (java.util.List<java.lang.Long>)value$; break;
    case 20: aUlong = (java.util.List<java.lang.Long>)value$; break;
    case 21: aXlong = (java.util.List<java.lang.Long>)value$; break;
    case 22: aUxlong = (java.util.List<java.lang.Long>)value$; break;
    case 23: aDec = (java.util.List<java.nio.ByteBuffer>)value$; break;
    case 24: aFloat = (java.util.List<java.lang.Float>)value$; break;
    case 25: aDouble = (java.util.List<java.lang.Double>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sString' field.
   */
  public java.lang.CharSequence getSString() {
    return sString;
  }

  /**
   * Sets the value of the 'sString' field.
   * @param value the value to set.
   */
  public void setSString(java.lang.CharSequence value) {
    this.sString = value;
  }

  /**
   * Gets the value of the 'sBinary' field.
   */
  public java.lang.CharSequence getSBinary() {
    return sBinary;
  }

  /**
   * Sets the value of the 'sBinary' field.
   * @param value the value to set.
   */
  public void setSBinary(java.lang.CharSequence value) {
    this.sBinary = value;
  }

  /**
   * Gets the value of the 'sShort' field.
   */
  public java.lang.Integer getSShort() {
    return sShort;
  }

  /**
   * Sets the value of the 'sShort' field.
   * @param value the value to set.
   */
  public void setSShort(java.lang.Integer value) {
    this.sShort = value;
  }

  /**
   * Gets the value of the 'sUshort' field.
   */
  public java.lang.Integer getSUshort() {
    return sUshort;
  }

  /**
   * Sets the value of the 'sUshort' field.
   * @param value the value to set.
   */
  public void setSUshort(java.lang.Integer value) {
    this.sUshort = value;
  }

  /**
   * Gets the value of the 'sInt' field.
   */
  public java.lang.Integer getSInt() {
    return sInt;
  }

  /**
   * Sets the value of the 'sInt' field.
   * @param value the value to set.
   */
  public void setSInt(java.lang.Integer value) {
    this.sInt = value;
  }

  /**
   * Gets the value of the 'sUint' field.
   */
  public java.lang.Long getSUint() {
    return sUint;
  }

  /**
   * Sets the value of the 'sUint' field.
   * @param value the value to set.
   */
  public void setSUint(java.lang.Long value) {
    this.sUint = value;
  }

  /**
   * Gets the value of the 'sLong' field.
   */
  public java.lang.Long getSLong() {
    return sLong;
  }

  /**
   * Sets the value of the 'sLong' field.
   * @param value the value to set.
   */
  public void setSLong(java.lang.Long value) {
    this.sLong = value;
  }

  /**
   * Gets the value of the 'sUlong' field.
   */
  public java.lang.Long getSUlong() {
    return sUlong;
  }

  /**
   * Sets the value of the 'sUlong' field.
   * @param value the value to set.
   */
  public void setSUlong(java.lang.Long value) {
    this.sUlong = value;
  }

  /**
   * Gets the value of the 'sXlong' field.
   */
  public java.lang.Long getSXlong() {
    return sXlong;
  }

  /**
   * Sets the value of the 'sXlong' field.
   * @param value the value to set.
   */
  public void setSXlong(java.lang.Long value) {
    this.sXlong = value;
  }

  /**
   * Gets the value of the 'sUxlong' field.
   */
  public java.lang.Long getSUxlong() {
    return sUxlong;
  }

  /**
   * Sets the value of the 'sUxlong' field.
   * @param value the value to set.
   */
  public void setSUxlong(java.lang.Long value) {
    this.sUxlong = value;
  }

  /**
   * Gets the value of the 'sDec' field.
   */
  public java.math.BigDecimal getSDec() {
    return new java.math.BigDecimal(new java.math.BigInteger(sDec.array()), 2);
  }

  /**
   * Sets the value of the 'sDec' field.
   * @param value the value to set.
   */
  public void setSDec(java.math.BigDecimal value) {
    this.sDec = java.nio.ByteBuffer.wrap(value.unscaledValue().toByteArray());
  }

  /**
   * Gets the value of the 'sFloat' field.
   */
  public java.lang.Float getSFloat() {
    return sFloat;
  }

  /**
   * Sets the value of the 'sFloat' field.
   * @param value the value to set.
   */
  public void setSFloat(java.lang.Float value) {
    this.sFloat = value;
  }

  /**
   * Gets the value of the 'sDouble' field.
   */
  public java.lang.Double getSDouble() {
    return sDouble;
  }

  /**
   * Sets the value of the 'sDouble' field.
   * @param value the value to set.
   */
  public void setSDouble(java.lang.Double value) {
    this.sDouble = value;
  }

  /**
   * Gets the value of the 'aString' field.
   */
  public java.util.List<java.lang.CharSequence> getAString() {
    return aString;
  }

  /**
   * Sets the value of the 'aString' field.
   * @param value the value to set.
   */
  public void setAString(java.util.List<java.lang.CharSequence> value) {
    this.aString = value;
  }

  /**
   * Gets the value of the 'aBinary' field.
   */
  public java.util.List<java.lang.CharSequence> getABinary() {
    return aBinary;
  }

  /**
   * Sets the value of the 'aBinary' field.
   * @param value the value to set.
   */
  public void setABinary(java.util.List<java.lang.CharSequence> value) {
    this.aBinary = value;
  }

  /**
   * Gets the value of the 'aShort' field.
   */
  public java.util.List<java.lang.Integer> getAShort() {
    return aShort;
  }

  /**
   * Sets the value of the 'aShort' field.
   * @param value the value to set.
   */
  public void setAShort(java.util.List<java.lang.Integer> value) {
    this.aShort = value;
  }

  /**
   * Gets the value of the 'aUshort' field.
   */
  public java.util.List<java.lang.Integer> getAUshort() {
    return aUshort;
  }

  /**
   * Sets the value of the 'aUshort' field.
   * @param value the value to set.
   */
  public void setAUshort(java.util.List<java.lang.Integer> value) {
    this.aUshort = value;
  }

  /**
   * Gets the value of the 'aInt' field.
   */
  public java.util.List<java.lang.Integer> getAInt() {
    return aInt;
  }

  /**
   * Sets the value of the 'aInt' field.
   * @param value the value to set.
   */
  public void setAInt(java.util.List<java.lang.Integer> value) {
    this.aInt = value;
  }

  /**
   * Gets the value of the 'aUint' field.
   */
  public java.util.List<java.lang.Long> getAUint() {
    return aUint;
  }

  /**
   * Sets the value of the 'aUint' field.
   * @param value the value to set.
   */
  public void setAUint(java.util.List<java.lang.Long> value) {
    this.aUint = value;
  }

  /**
   * Gets the value of the 'aLong' field.
   */
  public java.util.List<java.lang.Long> getALong() {
    return aLong;
  }

  /**
   * Sets the value of the 'aLong' field.
   * @param value the value to set.
   */
  public void setALong(java.util.List<java.lang.Long> value) {
    this.aLong = value;
  }

  /**
   * Gets the value of the 'aUlong' field.
   */
  public java.util.List<java.lang.Long> getAUlong() {
    return aUlong;
  }

  /**
   * Sets the value of the 'aUlong' field.
   * @param value the value to set.
   */
  public void setAUlong(java.util.List<java.lang.Long> value) {
    this.aUlong = value;
  }

  /**
   * Gets the value of the 'aXlong' field.
   */
  public java.util.List<java.lang.Long> getAXlong() {
    return aXlong;
  }

  /**
   * Sets the value of the 'aXlong' field.
   * @param value the value to set.
   */
  public void setAXlong(java.util.List<java.lang.Long> value) {
    this.aXlong = value;
  }

  /**
   * Gets the value of the 'aUxlong' field.
   */
  public java.util.List<java.lang.Long> getAUxlong() {
    return aUxlong;
  }

  /**
   * Sets the value of the 'aUxlong' field.
   * @param value the value to set.
   */
  public void setAUxlong(java.util.List<java.lang.Long> value) {
    this.aUxlong = value;
  }

  /**
   * Gets the value of the 'aDec' field.
   */
  public java.util.List<java.nio.ByteBuffer> getADec() {
    return aDec;
  }

  /**
   * Sets the value of the 'aDec' field.
   * @param value the value to set.
   */
  public void setADec(java.util.List<java.nio.ByteBuffer> value) {
    this.aDec = value;
  }

  /**
   * Gets the value of the 'aFloat' field.
   */
  public java.util.List<java.lang.Float> getAFloat() {
    return aFloat;
  }

  /**
   * Sets the value of the 'aFloat' field.
   * @param value the value to set.
   */
  public void setAFloat(java.util.List<java.lang.Float> value) {
    this.aFloat = value;
  }

  /**
   * Gets the value of the 'aDouble' field.
   */
  public java.util.List<java.lang.Double> getADouble() {
    return aDouble;
  }

  /**
   * Sets the value of the 'aDouble' field.
   * @param value the value to set.
   */
  public void setADouble(java.util.List<java.lang.Double> value) {
    this.aDouble = value;
  }

  /** Creates a new AlltypesRecord RecordBuilder */
  public static test.example.AlltypesRecord.Builder newBuilder() {
    return new test.example.AlltypesRecord.Builder();
  }
  
  /** Creates a new AlltypesRecord RecordBuilder by copying an existing Builder */
  public static test.example.AlltypesRecord.Builder newBuilder(test.example.AlltypesRecord.Builder other) {
    return new test.example.AlltypesRecord.Builder(other);
  }
  
  /** Creates a new AlltypesRecord RecordBuilder by copying an existing AlltypesRecord instance */
  public static test.example.AlltypesRecord.Builder newBuilder(test.example.AlltypesRecord other) {
    return new test.example.AlltypesRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for AlltypesRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AlltypesRecord>
    implements org.apache.avro.data.RecordBuilder<AlltypesRecord> {

    private java.lang.CharSequence sString;
    private java.lang.CharSequence sBinary;
    private int sShort;
    private int sUshort;
    private int sInt;
    private long sUint;
    private long sLong;
    private long sUlong;
    private long sXlong;
    private long sUxlong;
    private java.nio.ByteBuffer sDec;
    private float sFloat;
    private double sDouble;
    private java.util.List<java.lang.CharSequence> aString;
    private java.util.List<java.lang.CharSequence> aBinary;
    private java.util.List<java.lang.Integer> aShort;
    private java.util.List<java.lang.Integer> aUshort;
    private java.util.List<java.lang.Integer> aInt;
    private java.util.List<java.lang.Long> aUint;
    private java.util.List<java.lang.Long> aLong;
    private java.util.List<java.lang.Long> aUlong;
    private java.util.List<java.lang.Long> aXlong;
    private java.util.List<java.lang.Long> aUxlong;
    private java.util.List<java.nio.ByteBuffer> aDec;
    private java.util.List<java.lang.Float> aFloat;
    private java.util.List<java.lang.Double> aDouble;

    /** Creates a new Builder */
    private Builder() {
      super(test.example.AlltypesRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(test.example.AlltypesRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sString)) {
        this.sString = data().deepCopy(fields()[0].schema(), other.sString);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sBinary)) {
        this.sBinary = data().deepCopy(fields()[1].schema(), other.sBinary);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sShort)) {
        this.sShort = data().deepCopy(fields()[2].schema(), other.sShort);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sUshort)) {
        this.sUshort = data().deepCopy(fields()[3].schema(), other.sUshort);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sInt)) {
        this.sInt = data().deepCopy(fields()[4].schema(), other.sInt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sUint)) {
        this.sUint = data().deepCopy(fields()[5].schema(), other.sUint);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sLong)) {
        this.sLong = data().deepCopy(fields()[6].schema(), other.sLong);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sUlong)) {
        this.sUlong = data().deepCopy(fields()[7].schema(), other.sUlong);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.sXlong)) {
        this.sXlong = data().deepCopy(fields()[8].schema(), other.sXlong);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.sUxlong)) {
        this.sUxlong = data().deepCopy(fields()[9].schema(), other.sUxlong);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sDec)) {
        this.sDec = data().deepCopy(fields()[10].schema(), other.sDec);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.sFloat)) {
        this.sFloat = data().deepCopy(fields()[11].schema(), other.sFloat);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.sDouble)) {
        this.sDouble = data().deepCopy(fields()[12].schema(), other.sDouble);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.aString)) {
        this.aString = data().deepCopy(fields()[13].schema(), other.aString);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.aBinary)) {
        this.aBinary = data().deepCopy(fields()[14].schema(), other.aBinary);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.aShort)) {
        this.aShort = data().deepCopy(fields()[15].schema(), other.aShort);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.aUshort)) {
        this.aUshort = data().deepCopy(fields()[16].schema(), other.aUshort);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.aInt)) {
        this.aInt = data().deepCopy(fields()[17].schema(), other.aInt);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.aUint)) {
        this.aUint = data().deepCopy(fields()[18].schema(), other.aUint);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.aLong)) {
        this.aLong = data().deepCopy(fields()[19].schema(), other.aLong);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.aUlong)) {
        this.aUlong = data().deepCopy(fields()[20].schema(), other.aUlong);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.aXlong)) {
        this.aXlong = data().deepCopy(fields()[21].schema(), other.aXlong);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.aUxlong)) {
        this.aUxlong = data().deepCopy(fields()[22].schema(), other.aUxlong);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.aDec)) {
        this.aDec = data().deepCopy(fields()[23].schema(), other.aDec);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.aFloat)) {
        this.aFloat = data().deepCopy(fields()[24].schema(), other.aFloat);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.aDouble)) {
        this.aDouble = data().deepCopy(fields()[25].schema(), other.aDouble);
        fieldSetFlags()[25] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AlltypesRecord instance */
    private Builder(test.example.AlltypesRecord other) {
            super(test.example.AlltypesRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.sString)) {
        this.sString = data().deepCopy(fields()[0].schema(), other.sString);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sBinary)) {
        this.sBinary = data().deepCopy(fields()[1].schema(), other.sBinary);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sShort)) {
        this.sShort = data().deepCopy(fields()[2].schema(), other.sShort);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sUshort)) {
        this.sUshort = data().deepCopy(fields()[3].schema(), other.sUshort);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sInt)) {
        this.sInt = data().deepCopy(fields()[4].schema(), other.sInt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sUint)) {
        this.sUint = data().deepCopy(fields()[5].schema(), other.sUint);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sLong)) {
        this.sLong = data().deepCopy(fields()[6].schema(), other.sLong);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sUlong)) {
        this.sUlong = data().deepCopy(fields()[7].schema(), other.sUlong);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.sXlong)) {
        this.sXlong = data().deepCopy(fields()[8].schema(), other.sXlong);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.sUxlong)) {
        this.sUxlong = data().deepCopy(fields()[9].schema(), other.sUxlong);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sDec)) {
        this.sDec = data().deepCopy(fields()[10].schema(), other.sDec);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.sFloat)) {
        this.sFloat = data().deepCopy(fields()[11].schema(), other.sFloat);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.sDouble)) {
        this.sDouble = data().deepCopy(fields()[12].schema(), other.sDouble);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.aString)) {
        this.aString = data().deepCopy(fields()[13].schema(), other.aString);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.aBinary)) {
        this.aBinary = data().deepCopy(fields()[14].schema(), other.aBinary);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.aShort)) {
        this.aShort = data().deepCopy(fields()[15].schema(), other.aShort);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.aUshort)) {
        this.aUshort = data().deepCopy(fields()[16].schema(), other.aUshort);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.aInt)) {
        this.aInt = data().deepCopy(fields()[17].schema(), other.aInt);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.aUint)) {
        this.aUint = data().deepCopy(fields()[18].schema(), other.aUint);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.aLong)) {
        this.aLong = data().deepCopy(fields()[19].schema(), other.aLong);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.aUlong)) {
        this.aUlong = data().deepCopy(fields()[20].schema(), other.aUlong);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.aXlong)) {
        this.aXlong = data().deepCopy(fields()[21].schema(), other.aXlong);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.aUxlong)) {
        this.aUxlong = data().deepCopy(fields()[22].schema(), other.aUxlong);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.aDec)) {
        this.aDec = data().deepCopy(fields()[23].schema(), other.aDec);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.aFloat)) {
        this.aFloat = data().deepCopy(fields()[24].schema(), other.aFloat);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.aDouble)) {
        this.aDouble = data().deepCopy(fields()[25].schema(), other.aDouble);
        fieldSetFlags()[25] = true;
      }
    }

    /** Gets the value of the 'sString' field */
    public java.lang.CharSequence getSString() {
      return sString;
    }
    
    /** Sets the value of the 'sString' field */
    public test.example.AlltypesRecord.Builder setSString(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sString = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'sString' field has been set */
    public boolean hasSString() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'sString' field */
    public test.example.AlltypesRecord.Builder clearSString() {
      sString = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'sBinary' field */
    public java.lang.CharSequence getSBinary() {
      return sBinary;
    }
    
    /** Sets the value of the 'sBinary' field */
    public test.example.AlltypesRecord.Builder setSBinary(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.sBinary = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'sBinary' field has been set */
    public boolean hasSBinary() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'sBinary' field */
    public test.example.AlltypesRecord.Builder clearSBinary() {
      sBinary = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'sShort' field */
    public java.lang.Integer getSShort() {
      return sShort;
    }
    
    /** Sets the value of the 'sShort' field */
    public test.example.AlltypesRecord.Builder setSShort(int value) {
      validate(fields()[2], value);
      this.sShort = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'sShort' field has been set */
    public boolean hasSShort() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'sShort' field */
    public test.example.AlltypesRecord.Builder clearSShort() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'sUshort' field */
    public java.lang.Integer getSUshort() {
      return sUshort;
    }
    
    /** Sets the value of the 'sUshort' field */
    public test.example.AlltypesRecord.Builder setSUshort(int value) {
      validate(fields()[3], value);
      this.sUshort = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'sUshort' field has been set */
    public boolean hasSUshort() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'sUshort' field */
    public test.example.AlltypesRecord.Builder clearSUshort() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'sInt' field */
    public java.lang.Integer getSInt() {
      return sInt;
    }
    
    /** Sets the value of the 'sInt' field */
    public test.example.AlltypesRecord.Builder setSInt(int value) {
      validate(fields()[4], value);
      this.sInt = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'sInt' field has been set */
    public boolean hasSInt() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'sInt' field */
    public test.example.AlltypesRecord.Builder clearSInt() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'sUint' field */
    public java.lang.Long getSUint() {
      return sUint;
    }
    
    /** Sets the value of the 'sUint' field */
    public test.example.AlltypesRecord.Builder setSUint(long value) {
      validate(fields()[5], value);
      this.sUint = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'sUint' field has been set */
    public boolean hasSUint() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'sUint' field */
    public test.example.AlltypesRecord.Builder clearSUint() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'sLong' field */
    public java.lang.Long getSLong() {
      return sLong;
    }
    
    /** Sets the value of the 'sLong' field */
    public test.example.AlltypesRecord.Builder setSLong(long value) {
      validate(fields()[6], value);
      this.sLong = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'sLong' field has been set */
    public boolean hasSLong() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'sLong' field */
    public test.example.AlltypesRecord.Builder clearSLong() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'sUlong' field */
    public java.lang.Long getSUlong() {
      return sUlong;
    }
    
    /** Sets the value of the 'sUlong' field */
    public test.example.AlltypesRecord.Builder setSUlong(long value) {
      validate(fields()[7], value);
      this.sUlong = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'sUlong' field has been set */
    public boolean hasSUlong() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'sUlong' field */
    public test.example.AlltypesRecord.Builder clearSUlong() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'sXlong' field */
    public java.lang.Long getSXlong() {
      return sXlong;
    }
    
    /** Sets the value of the 'sXlong' field */
    public test.example.AlltypesRecord.Builder setSXlong(long value) {
      validate(fields()[8], value);
      this.sXlong = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'sXlong' field has been set */
    public boolean hasSXlong() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'sXlong' field */
    public test.example.AlltypesRecord.Builder clearSXlong() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'sUxlong' field */
    public java.lang.Long getSUxlong() {
      return sUxlong;
    }
    
    /** Sets the value of the 'sUxlong' field */
    public test.example.AlltypesRecord.Builder setSUxlong(long value) {
      validate(fields()[9], value);
      this.sUxlong = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'sUxlong' field has been set */
    public boolean hasSUxlong() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'sUxlong' field */
    public test.example.AlltypesRecord.Builder clearSUxlong() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'sDec' field */
    public java.nio.ByteBuffer getSDec() {
      return sDec;
    }
    
    /** Sets the value of the 'sDec' field */
    public test.example.AlltypesRecord.Builder setSDec(java.nio.ByteBuffer value) {
      validate(fields()[10], value);
      this.sDec = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'sDec' field has been set */
    public boolean hasSDec() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'sDec' field */
    public test.example.AlltypesRecord.Builder clearSDec() {
      sDec = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'sFloat' field */
    public java.lang.Float getSFloat() {
      return sFloat;
    }
    
    /** Sets the value of the 'sFloat' field */
    public test.example.AlltypesRecord.Builder setSFloat(float value) {
      validate(fields()[11], value);
      this.sFloat = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'sFloat' field has been set */
    public boolean hasSFloat() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'sFloat' field */
    public test.example.AlltypesRecord.Builder clearSFloat() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'sDouble' field */
    public java.lang.Double getSDouble() {
      return sDouble;
    }
    
    /** Sets the value of the 'sDouble' field */
    public test.example.AlltypesRecord.Builder setSDouble(double value) {
      validate(fields()[12], value);
      this.sDouble = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'sDouble' field has been set */
    public boolean hasSDouble() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'sDouble' field */
    public test.example.AlltypesRecord.Builder clearSDouble() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'aString' field */
    public java.util.List<java.lang.CharSequence> getAString() {
      return aString;
    }
    
    /** Sets the value of the 'aString' field */
    public test.example.AlltypesRecord.Builder setAString(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[13], value);
      this.aString = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'aString' field has been set */
    public boolean hasAString() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'aString' field */
    public test.example.AlltypesRecord.Builder clearAString() {
      aString = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'aBinary' field */
    public java.util.List<java.lang.CharSequence> getABinary() {
      return aBinary;
    }
    
    /** Sets the value of the 'aBinary' field */
    public test.example.AlltypesRecord.Builder setABinary(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[14], value);
      this.aBinary = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'aBinary' field has been set */
    public boolean hasABinary() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'aBinary' field */
    public test.example.AlltypesRecord.Builder clearABinary() {
      aBinary = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'aShort' field */
    public java.util.List<java.lang.Integer> getAShort() {
      return aShort;
    }
    
    /** Sets the value of the 'aShort' field */
    public test.example.AlltypesRecord.Builder setAShort(java.util.List<java.lang.Integer> value) {
      validate(fields()[15], value);
      this.aShort = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'aShort' field has been set */
    public boolean hasAShort() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'aShort' field */
    public test.example.AlltypesRecord.Builder clearAShort() {
      aShort = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'aUshort' field */
    public java.util.List<java.lang.Integer> getAUshort() {
      return aUshort;
    }
    
    /** Sets the value of the 'aUshort' field */
    public test.example.AlltypesRecord.Builder setAUshort(java.util.List<java.lang.Integer> value) {
      validate(fields()[16], value);
      this.aUshort = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'aUshort' field has been set */
    public boolean hasAUshort() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'aUshort' field */
    public test.example.AlltypesRecord.Builder clearAUshort() {
      aUshort = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'aInt' field */
    public java.util.List<java.lang.Integer> getAInt() {
      return aInt;
    }
    
    /** Sets the value of the 'aInt' field */
    public test.example.AlltypesRecord.Builder setAInt(java.util.List<java.lang.Integer> value) {
      validate(fields()[17], value);
      this.aInt = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'aInt' field has been set */
    public boolean hasAInt() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'aInt' field */
    public test.example.AlltypesRecord.Builder clearAInt() {
      aInt = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'aUint' field */
    public java.util.List<java.lang.Long> getAUint() {
      return aUint;
    }
    
    /** Sets the value of the 'aUint' field */
    public test.example.AlltypesRecord.Builder setAUint(java.util.List<java.lang.Long> value) {
      validate(fields()[18], value);
      this.aUint = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'aUint' field has been set */
    public boolean hasAUint() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'aUint' field */
    public test.example.AlltypesRecord.Builder clearAUint() {
      aUint = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'aLong' field */
    public java.util.List<java.lang.Long> getALong() {
      return aLong;
    }
    
    /** Sets the value of the 'aLong' field */
    public test.example.AlltypesRecord.Builder setALong(java.util.List<java.lang.Long> value) {
      validate(fields()[19], value);
      this.aLong = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'aLong' field has been set */
    public boolean hasALong() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'aLong' field */
    public test.example.AlltypesRecord.Builder clearALong() {
      aLong = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'aUlong' field */
    public java.util.List<java.lang.Long> getAUlong() {
      return aUlong;
    }
    
    /** Sets the value of the 'aUlong' field */
    public test.example.AlltypesRecord.Builder setAUlong(java.util.List<java.lang.Long> value) {
      validate(fields()[20], value);
      this.aUlong = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'aUlong' field has been set */
    public boolean hasAUlong() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'aUlong' field */
    public test.example.AlltypesRecord.Builder clearAUlong() {
      aUlong = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /** Gets the value of the 'aXlong' field */
    public java.util.List<java.lang.Long> getAXlong() {
      return aXlong;
    }
    
    /** Sets the value of the 'aXlong' field */
    public test.example.AlltypesRecord.Builder setAXlong(java.util.List<java.lang.Long> value) {
      validate(fields()[21], value);
      this.aXlong = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'aXlong' field has been set */
    public boolean hasAXlong() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'aXlong' field */
    public test.example.AlltypesRecord.Builder clearAXlong() {
      aXlong = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /** Gets the value of the 'aUxlong' field */
    public java.util.List<java.lang.Long> getAUxlong() {
      return aUxlong;
    }
    
    /** Sets the value of the 'aUxlong' field */
    public test.example.AlltypesRecord.Builder setAUxlong(java.util.List<java.lang.Long> value) {
      validate(fields()[22], value);
      this.aUxlong = value;
      fieldSetFlags()[22] = true;
      return this; 
    }
    
    /** Checks whether the 'aUxlong' field has been set */
    public boolean hasAUxlong() {
      return fieldSetFlags()[22];
    }
    
    /** Clears the value of the 'aUxlong' field */
    public test.example.AlltypesRecord.Builder clearAUxlong() {
      aUxlong = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /** Gets the value of the 'aDec' field */
    public java.util.List<java.nio.ByteBuffer> getADec() {
      return aDec;
    }
    
    /** Sets the value of the 'aDec' field */
    public test.example.AlltypesRecord.Builder setADec(java.util.List<java.nio.ByteBuffer> value) {
      validate(fields()[23], value);
      this.aDec = value;
      fieldSetFlags()[23] = true;
      return this; 
    }
    
    /** Checks whether the 'aDec' field has been set */
    public boolean hasADec() {
      return fieldSetFlags()[23];
    }
    
    /** Clears the value of the 'aDec' field */
    public test.example.AlltypesRecord.Builder clearADec() {
      aDec = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /** Gets the value of the 'aFloat' field */
    public java.util.List<java.lang.Float> getAFloat() {
      return aFloat;
    }
    
    /** Sets the value of the 'aFloat' field */
    public test.example.AlltypesRecord.Builder setAFloat(java.util.List<java.lang.Float> value) {
      validate(fields()[24], value);
      this.aFloat = value;
      fieldSetFlags()[24] = true;
      return this; 
    }
    
    /** Checks whether the 'aFloat' field has been set */
    public boolean hasAFloat() {
      return fieldSetFlags()[24];
    }
    
    /** Clears the value of the 'aFloat' field */
    public test.example.AlltypesRecord.Builder clearAFloat() {
      aFloat = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /** Gets the value of the 'aDouble' field */
    public java.util.List<java.lang.Double> getADouble() {
      return aDouble;
    }
    
    /** Sets the value of the 'aDouble' field */
    public test.example.AlltypesRecord.Builder setADouble(java.util.List<java.lang.Double> value) {
      validate(fields()[25], value);
      this.aDouble = value;
      fieldSetFlags()[25] = true;
      return this; 
    }
    
    /** Checks whether the 'aDouble' field has been set */
    public boolean hasADouble() {
      return fieldSetFlags()[25];
    }
    
    /** Clears the value of the 'aDouble' field */
    public test.example.AlltypesRecord.Builder clearADouble() {
      aDouble = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    @Override
    public AlltypesRecord build() {
      try {
        AlltypesRecord record = new AlltypesRecord();
        record.sString = fieldSetFlags()[0] ? this.sString : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sBinary = fieldSetFlags()[1] ? this.sBinary : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.sShort = fieldSetFlags()[2] ? this.sShort : (java.lang.Integer) defaultValue(fields()[2]);
        record.sUshort = fieldSetFlags()[3] ? this.sUshort : (java.lang.Integer) defaultValue(fields()[3]);
        record.sInt = fieldSetFlags()[4] ? this.sInt : (java.lang.Integer) defaultValue(fields()[4]);
        record.sUint = fieldSetFlags()[5] ? this.sUint : (java.lang.Long) defaultValue(fields()[5]);
        record.sLong = fieldSetFlags()[6] ? this.sLong : (java.lang.Long) defaultValue(fields()[6]);
        record.sUlong = fieldSetFlags()[7] ? this.sUlong : (java.lang.Long) defaultValue(fields()[7]);
        record.sXlong = fieldSetFlags()[8] ? this.sXlong : (java.lang.Long) defaultValue(fields()[8]);
        record.sUxlong = fieldSetFlags()[9] ? this.sUxlong : (java.lang.Long) defaultValue(fields()[9]);
        record.sDec = fieldSetFlags()[10] ? this.sDec : (java.nio.ByteBuffer) defaultValue(fields()[10]);
        record.sFloat = fieldSetFlags()[11] ? this.sFloat : (java.lang.Float) defaultValue(fields()[11]);
        record.sDouble = fieldSetFlags()[12] ? this.sDouble : (java.lang.Double) defaultValue(fields()[12]);
        record.aString = fieldSetFlags()[13] ? this.aString : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[13]);
        record.aBinary = fieldSetFlags()[14] ? this.aBinary : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[14]);
        record.aShort = fieldSetFlags()[15] ? this.aShort : (java.util.List<java.lang.Integer>) defaultValue(fields()[15]);
        record.aUshort = fieldSetFlags()[16] ? this.aUshort : (java.util.List<java.lang.Integer>) defaultValue(fields()[16]);
        record.aInt = fieldSetFlags()[17] ? this.aInt : (java.util.List<java.lang.Integer>) defaultValue(fields()[17]);
        record.aUint = fieldSetFlags()[18] ? this.aUint : (java.util.List<java.lang.Long>) defaultValue(fields()[18]);
        record.aLong = fieldSetFlags()[19] ? this.aLong : (java.util.List<java.lang.Long>) defaultValue(fields()[19]);
        record.aUlong = fieldSetFlags()[20] ? this.aUlong : (java.util.List<java.lang.Long>) defaultValue(fields()[20]);
        record.aXlong = fieldSetFlags()[21] ? this.aXlong : (java.util.List<java.lang.Long>) defaultValue(fields()[21]);
        record.aUxlong = fieldSetFlags()[22] ? this.aUxlong : (java.util.List<java.lang.Long>) defaultValue(fields()[22]);
        record.aDec = fieldSetFlags()[23] ? this.aDec : (java.util.List<java.nio.ByteBuffer>) defaultValue(fields()[23]);
        record.aFloat = fieldSetFlags()[24] ? this.aFloat : (java.util.List<java.lang.Float>) defaultValue(fields()[24]);
        record.aDouble = fieldSetFlags()[25] ? this.aDouble : (java.util.List<java.lang.Double>) defaultValue(fields()[25]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
